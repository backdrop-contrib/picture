<?php
/**
 * @file
 * Install/schema hooks for the picture module.
 */

/**
 * Implements hook_schema().
 */
function picture_schema() {
  $schema = array();
  $schema['picture_mapping'] = array(
    'description' => 'Responsible images and styles mappings to breakpoints',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The internal identifier for this mapping',
        'no export' => TRUE,
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine name of the mapping',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The machine name of the mapping',
      ),
      'breakpoint_group' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The group this mapping belongs to',
      ),
      'mapping' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'description' => 'The mappings linked to the breakpoints group',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'machine_name',
      'primary key' => 'id',
      'identifier' => 'picture_mapping',
      'admin_title' => 'label',
      'default hook' => 'default_picture_mapping',
      'object factory' => 'picture_mapping_object_factory',
      'create callback' => 'picture_mapping_create',
      'save callback' => 'picture_mapping_save',
      'export callback' => 'picture_mapping_export',
      'api' => array(
        'owner' => 'picture',
        'api' => 'default_picture_mapping',
        'minimum_version' => 2,
        'current_version' => 2,
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function picture_install() {
  module_load_include('admin.inc', 'picture');
  config_set('picture.settings', 'picture_updated_to_file_entity_2', _picture_update_to_file_entity_2());
  // Dynamically generated variable data was detected on the following lines.
  // /picture/picture.module line 1976
  // /picture/picture.module line 1946
  // /picture/picture.install line 147
}

/**
 * Implements hook_uninstall().
 */
function picture_uninstall() {
  config_clear('picture.settings', 'picture_ckeditor_mappings');
  config_clear('picture.settings', 'picture_ckeditor_label');
  config_clear('picture.settings', 'picture_updated_to_file_entity_2');
  config_clear('picture.settings', 'picture_js_scope');
  config_clear('picture.settings', 'picture_polyfill_version');
  config_clear('picture.settings', 'picture_fallback_method');

  if (module_exists('file_entity') && function_exists('file_type_load_all')) {
    // Delete field formatter settings.
    ctools_include('export');
    $entity_info = entity_get_info('file');
    $file_types = file_type_load_all();
    $view_modes = array_keys($entity_info['view modes']);
    $view_modes[] = 'default';
    $formatters = array(
      'file_picture',
      'file_field_picture',
      'file_picture_sizes_formatter',
      'file_field_picture_sizes_formatter',
    );
    foreach ($file_types as $file_type) {
      foreach ($view_modes as $view_mode) {
        foreach ($formatters as $formatter) {
          ctools_export_crud_delete('file_display', $file_type->type . '__' . $view_mode . '__' . $formatter);
        }
      }
    }
    file_info_cache_clear();
  }

}

/**
 * Implements hook_requirements().
 */
function picture_requirements($phase) {
  $requirements = array();
  if (module_exists('colorbox')) {
    $t = get_t();
    $info = system_get_info('module', 'colorbox');
    $requirements['picture_colorbox'] = array(
      'title' => $t('Picture: Colorbox module version.'),
      'value' => $info['version'],
      'severity' => REQUIREMENT_OK,
    );
    if (version_compare($info['version'], '7.x-2.5') < 0) {
      $requirements['picture_colorbox']['description'] = $t('The Colorbox module must be version 7.x-2.5 or higher in order to work with the Picture module.');
      $requirements['picture_colorbox']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $requirements;
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function picture_update_7200() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function picture_update_7201() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function picture_update_7202() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function picture_update_7203() { }

/**
 * Implements hook_update_last_removed().
 */
function picture_update_last_removed() {
  return 7203;
}

/**
 * Implements hook_update_N().
 */
function picture_update_1000() {
  $config = config('picture.settings');
  $config->set('picture_ckeditor_mappings', update_variable_get('picture_ckeditor_mappings', 'dynamic value in file /picture/picture.module line 1976'));
  $config->set('picture_ckeditor_label', update_variable_get('picture_ckeditor_label', 'dynamic value in file /picture/picture.module line 1946'));
  $config->set('picture_ckeditor_default_mapping', update_variable_get('picture_ckeditor_default_mapping', 'not_set'));
  $config->set('picture_updated_to_file_entity_2', update_variable_get('picture_updated_to_file_entity_2', 'FALSE'));
  $config->set('picture_js_scope', update_variable_get('picture_js_scope', 'footer'));
  $config->set('picture_polyfill_version', update_variable_get('picture_polyfill_version', 'min'));
  $config->set('picture_fallback_method', update_variable_get('picture_fallback_method', 'src'));
  $config->set('picture_img_sizes_output_method', update_variable_get('picture_img_sizes_output_method', 'picture_element'));
  $config->set('picture_ckeditor_groups', update_variable_get('picture_ckeditor_groups', 'dynamic value in file /picture/picture.install line 147'));
  $config->set('picture_use_sizes_in_wysiwyg', update_variable_get('picture_use_sizes_in_wysiwyg', 'FALSE'));
  $config->set('picture_ckeditor_required', update_variable_get('picture_ckeditor_required', 'TRUE'));
  update_variable_del('picture_ckeditor_mappings');
  update_variable_del('picture_ckeditor_label');
  update_variable_del('picture_ckeditor_default_mapping');
  update_variable_del('picture_updated_to_file_entity_2');
  update_variable_del('picture_js_scope');
  update_variable_del('picture_polyfill_version');
  update_variable_del('picture_fallback_method');
  update_variable_del('picture_img_sizes_output_method');
  update_variable_del('picture_ckeditor_groups');
  update_variable_del('picture_use_sizes_in_wysiwyg');
  update_variable_del('picture_ckeditor_required');
}
